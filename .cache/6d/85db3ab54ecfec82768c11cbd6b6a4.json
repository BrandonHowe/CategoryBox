{"id":"../node_modules/@thi.ng/transducers/iter/line.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1602941589745},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\transducers\\package.json","includedInParent":true,"mtime":1602877541099},{"name":"../xform/map","loc":{"line":1,"column":20},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\transducers\\iter\\line.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\transducers\\xform\\map.js"},{"name":"./norm-range","loc":{"line":2,"column":26},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\transducers\\iter\\line.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\transducers\\iter\\norm-range.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.line = void 0;\n\nvar _map = require(\"../xform/map\");\n\nvar _normRange = require(\"./norm-range\");\n\n/**\n * Iterator yielding `steps` + 1 interpolated values on a line in the\n * closed `[start .. end]` interval.\n *\n * @remarks\n * This is similar to {@link range}, but potentially provides more\n * precise values (by avoiding the accumulation of floating point errors\n * during iteration).\n *\n * Similar functionality (w/ more options) is availble here:\n * {@link @thi.ng/dsp#line}.\n *\n * @example\n * ```ts\n * [...line(50, 100, 10)]\n * // [\n * //    50, 55, 60, 65, 70,\n * //    75, 80, 85, 90, 95,\n * //   100\n * // ]\n * ```\n *\n * @param start -\n * @param end -\n * @param steps -\n */\nconst line = (start, end, steps = 10) => {\n  const delta = end - start;\n  return (0, _map.map)(t => start + delta * t, (0, _normRange.normRange)(steps));\n};\n\nexports.line = line;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":3,"column":0}},{"generated":{"line":38,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":7}},{"name":"line","generated":{"line":38,"column":6},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":13}},{"generated":{"line":38,"column":10},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":17}},{"generated":{"line":38,"column":13},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":20}},{"name":"start","generated":{"line":38,"column":14},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":21}},{"generated":{"line":38,"column":19},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":20}},{"name":"end","generated":{"line":38,"column":21},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":28}},{"generated":{"line":38,"column":24},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":20}},{"name":"steps","generated":{"line":38,"column":26},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":33}},{"generated":{"line":38,"column":31},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":38}},{"generated":{"line":38,"column":34},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":41}},{"generated":{"line":38,"column":36},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":20}},{"generated":{"line":38,"column":41},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":48}},{"generated":{"line":39,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":30,"column":4}},{"name":"delta","generated":{"line":39,"column":8},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":30,"column":10}},{"generated":{"line":39,"column":13},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":30,"column":15}},{"name":"end","generated":{"line":39,"column":16},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":30,"column":18}},{"generated":{"line":39,"column":19},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":30,"column":21}},{"name":"start","generated":{"line":39,"column":22},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":30,"column":24}},{"generated":{"line":39,"column":27},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":30,"column":4}},{"generated":{"line":40,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":4}},{"generated":{"line":40,"column":9},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":11}},{"name":"t","generated":{"line":40,"column":23},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":16}},{"generated":{"line":40,"column":24},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":15}},{"name":"start","generated":{"line":40,"column":28},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":22}},{"generated":{"line":40,"column":33},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":27}},{"name":"delta","generated":{"line":40,"column":36},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":30}},{"generated":{"line":40,"column":41},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":35}},{"name":"t","generated":{"line":40,"column":44},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":38}},{"generated":{"line":40,"column":45},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":11}},{"generated":{"line":40,"column":47},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":41}},{"name":"steps","generated":{"line":40,"column":73},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":51}},{"generated":{"line":40,"column":78},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":41}},{"generated":{"line":40,"column":79},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":11}},{"generated":{"line":40,"column":80},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":31,"column":4}},{"generated":{"line":41,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":32,"column":1}},{"generated":{"line":41,"column":1},"source":"../node_modules/@thi.ng/transducers/iter/line.js","original":{"line":29,"column":7}}],"sources":{"../node_modules/@thi.ng/transducers/iter/line.js":"import { map } from \"../xform/map\";\nimport { normRange } from \"./norm-range\";\n/**\n * Iterator yielding `steps` + 1 interpolated values on a line in the\n * closed `[start .. end]` interval.\n *\n * @remarks\n * This is similar to {@link range}, but potentially provides more\n * precise values (by avoiding the accumulation of floating point errors\n * during iteration).\n *\n * Similar functionality (w/ more options) is availble here:\n * {@link @thi.ng/dsp#line}.\n *\n * @example\n * ```ts\n * [...line(50, 100, 10)]\n * // [\n * //    50, 55, 60, 65, 70,\n * //    75, 80, 85, 90, 95,\n * //   100\n * // ]\n * ```\n *\n * @param start -\n * @param end -\n * @param steps -\n */\nexport const line = (start, end, steps = 10) => {\n    const delta = end - start;\n    return map((t) => start + delta * t, normRange(steps));\n};\n"},"lineCount":null}},"error":null,"hash":"0357ba54e54e6252cc6441ee6c82e579","cacheData":{"env":{}}}