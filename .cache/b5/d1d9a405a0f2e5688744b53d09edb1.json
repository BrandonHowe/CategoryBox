{"id":"../node_modules/@thi.ng/memoize/defonce.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1602941589745},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\memoize\\package.json","includedInParent":true,"mtime":1602877541097}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defonce = void 0;\nconst cache = {};\n/**\n * Lightweight named singleton factory, intended for hot-module\n * replacement situations. Takes a (preferably globally unique) `id` and\n * `factory` function. If there's no value defined for `id` yet, calls\n * `factory` to produce the singleton value and caches it. Returns\n * singleton value.\n *\n * Note: All created values will remain in the private cache until the\n * JS process terminates or this module itself has been reloaded (though\n * the latter shouldn't happen in an HMR workflow).\n *\n * @param id -\n * @param factory -\n */\n\nconst defonce = (id, factory) => cache.hasOwnProperty(id) ? cache[id] : cache[id] = factory();\n\nexports.defonce = defonce;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":1,"column":0}},{"name":"cache","generated":{"line":7,"column":6},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":1,"column":6}},{"generated":{"line":7,"column":11},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":1,"column":11}},{"generated":{"line":7,"column":14},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":1,"column":14}},{"generated":{"line":7,"column":16},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":2,"column":0}},{"generated":{"line":23,"column":0},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":7}},{"name":"defonce","generated":{"line":23,"column":6},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":13}},{"generated":{"line":23,"column":13},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":20}},{"generated":{"line":23,"column":16},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":23}},{"name":"id","generated":{"line":23,"column":17},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":24}},{"generated":{"line":23,"column":19},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":23}},{"name":"factory","generated":{"line":23,"column":21},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":28}},{"generated":{"line":23,"column":28},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":23}},{"name":"cache","generated":{"line":23,"column":33},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":40}},{"generated":{"line":23,"column":38},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":45}},{"name":"hasOwnProperty","generated":{"line":23,"column":39},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":46}},{"generated":{"line":23,"column":53},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":40}},{"name":"id","generated":{"line":23,"column":54},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":61}},{"generated":{"line":23,"column":56},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":40}},{"name":"cache","generated":{"line":23,"column":60},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":67}},{"generated":{"line":23,"column":65},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":72}},{"name":"id","generated":{"line":23,"column":66},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":73}},{"generated":{"line":23,"column":68},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":72}},{"generated":{"line":23,"column":69},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":40}},{"name":"cache","generated":{"line":23,"column":72},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":80}},{"generated":{"line":23,"column":77},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":85}},{"name":"id","generated":{"line":23,"column":78},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":86}},{"generated":{"line":23,"column":80},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":85}},{"generated":{"line":23,"column":81},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":80}},{"name":"factory","generated":{"line":23,"column":84},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":92}},{"generated":{"line":23,"column":91},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":99}},{"generated":{"line":23,"column":93},"source":"../node_modules/@thi.ng/memoize/defonce.js","original":{"line":16,"column":7}}],"sources":{"../node_modules/@thi.ng/memoize/defonce.js":"const cache = {};\n/**\n * Lightweight named singleton factory, intended for hot-module\n * replacement situations. Takes a (preferably globally unique) `id` and\n * `factory` function. If there's no value defined for `id` yet, calls\n * `factory` to produce the singleton value and caches it. Returns\n * singleton value.\n *\n * Note: All created values will remain in the private cache until the\n * JS process terminates or this module itself has been reloaded (though\n * the latter shouldn't happen in an HMR workflow).\n *\n * @param id -\n * @param factory -\n */\nexport const defonce = (id, factory) => cache.hasOwnProperty(id) ? cache[id] : (cache[id] = factory());\n"},"lineCount":null}},"error":null,"hash":"dd12aa1a29ba5093dcc26c98f7d1a99d","cacheData":{"env":{}}}