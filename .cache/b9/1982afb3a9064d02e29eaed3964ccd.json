{"id":"../node_modules/@thi.ng/strings/join.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1602941589745},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\strings\\package.json","includedInParent":true,"mtime":1602877541097},{"name":"@thi.ng/memoize","loc":{"line":1,"column":25},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\strings\\join.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\memoize\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.join = void 0;\n\nvar _memoize = require(\"@thi.ng/memoize\");\n\n/**\n * Higher-order version of `Array.join()`. Takes separator string `sep`\n * and returns function which accepts an array and joins all elements w/\n * separator into a result string.\n *\n * @example\n * ```ts\n * const slashes = join(\"/\");\n *\n * slashes([1, 2, 3]);\n * // \"1/2/3\"\n *\n * const formatOBJFace = partial(\n *   format, [\"f \", slashes, \" \", slashes, \" \", slashes]\n * );\n *\n * formatOBJFace([1, 2], [3, 4], [5, 6]);\n * // \"f 1/2 3/4 5/6\"\n * ```\n */\nconst join = (0, _memoize.memoize1)(sep => x => x.join(sep));\nexports.join = join;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":2,"column":0}},{"generated":{"line":30,"column":0},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":7}},{"name":"join","generated":{"line":30,"column":6},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":13}},{"generated":{"line":30,"column":10},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":17}},{"generated":{"line":30,"column":13},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":20}},{"name":"sep","generated":{"line":30,"column":36},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":30}},{"generated":{"line":30,"column":39},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":29}},{"name":"x","generated":{"line":30,"column":43},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":39}},{"generated":{"line":30,"column":44},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":38}},{"name":"x","generated":{"line":30,"column":48},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":45}},{"generated":{"line":30,"column":49},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":46}},{"name":"join","generated":{"line":30,"column":50},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":47}},{"generated":{"line":30,"column":54},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":45}},{"name":"sep","generated":{"line":30,"column":55},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":52}},{"generated":{"line":30,"column":58},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":45}},{"generated":{"line":30,"column":59},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":20}},{"generated":{"line":30,"column":60},"source":"../node_modules/@thi.ng/strings/join.js","original":{"line":22,"column":7}}],"sources":{"../node_modules/@thi.ng/strings/join.js":"import { memoize1 } from \"@thi.ng/memoize\";\n/**\n * Higher-order version of `Array.join()`. Takes separator string `sep`\n * and returns function which accepts an array and joins all elements w/\n * separator into a result string.\n *\n * @example\n * ```ts\n * const slashes = join(\"/\");\n *\n * slashes([1, 2, 3]);\n * // \"1/2/3\"\n *\n * const formatOBJFace = partial(\n *   format, [\"f \", slashes, \" \", slashes, \" \", slashes]\n * );\n *\n * formatOBJFace([1, 2], [3, 4], [5, 6]);\n * // \"f 1/2 3/4 5/6\"\n * ```\n */\nexport const join = memoize1((sep) => (x) => x.join(sep));\n"},"lineCount":null}},"error":null,"hash":"78fb41bd3bccc8c06c3ca63a2e3ad2bb","cacheData":{"env":{}}}