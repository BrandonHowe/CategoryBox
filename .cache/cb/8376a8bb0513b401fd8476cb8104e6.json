{"id":"../node_modules/@thi.ng/strings/wrap.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1604244572636},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\strings\\package.json","includedInParent":true,"mtime":1602877541097},{"name":"@thi.ng/memoize","loc":{"line":1,"column":25},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\strings\\wrap.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\memoize\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrap = void 0;\n\nvar _memoize = require(\"@thi.ng/memoize\");\n\n/**\n * Returns a {@link Stringer} which wrap inputs with given `pad` string on\n * both sides.\n */\nconst wrap = (0, _memoize.memoizeJ)(pad => x => pad + x + pad);\nexports.wrap = wrap;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":2,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":3,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":4,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":7}},{"name":"wrap","generated":{"line":14,"column":6},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":13}},{"generated":{"line":14,"column":10},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":17}},{"generated":{"line":14,"column":13},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":20}},{"name":"pad","generated":{"line":14,"column":36},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":30}},{"generated":{"line":14,"column":39},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":29}},{"name":"x","generated":{"line":14,"column":43},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":39}},{"generated":{"line":14,"column":44},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":38}},{"name":"pad","generated":{"line":14,"column":48},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":45}},{"generated":{"line":14,"column":51},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":48}},{"name":"x","generated":{"line":14,"column":54},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":51}},{"generated":{"line":14,"column":55},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":45}},{"name":"pad","generated":{"line":14,"column":58},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":55}},{"generated":{"line":14,"column":61},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":20}},{"generated":{"line":14,"column":62},"source":"../node_modules/@thi.ng/strings/wrap.js","original":{"line":6,"column":7}}],"sources":{"../node_modules/@thi.ng/strings/wrap.js":"import { memoizeJ } from \"@thi.ng/memoize\";\n/**\n * Returns a {@link Stringer} which wrap inputs with given `pad` string on\n * both sides.\n */\nexport const wrap = memoizeJ((pad) => (x) => pad + x + pad);\n"},"lineCount":null}},"error":null,"hash":"036dd9efc795147f131242dbc6f9c91c","cacheData":{"env":{}}}