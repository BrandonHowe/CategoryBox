{"id":"../node_modules/@thi.ng/transducers/func/compr.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1602941589745},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\transducers\\package.json","includedInParent":true,"mtime":1602877541099}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compR = void 0;\n\n/**\n * Reducer composition helper, internally used by various transducers\n * during initialization. Takes existing reducer `rfn` (a 3-tuple) and a\n * reducing function `fn`. Returns a new reducer tuple.\n *\n * @remarks\n * `rfn[2]` reduces values of type `B` into an accumulator of type `A`.\n * `fn` accepts values of type `C` and produces interim results of type\n * `B`, which are then (possibly) passed to the \"inner\" `rfn[2]`\n * function. Therefore the resulting reducer takes inputs of `C` and an\n * accumulator of type `A`.\n *\n * It is assumed that `fn` internally calls `rfn[2]` to pass its own\n * results for further processing by the nested reducer `rfn`.\n *\n * @example\n * ```ts\n * compR(rfn, fn)\n * // [rfn[0], rfn[1], fn]\n * ```\n *\n * @param rfn -\n * @param fn -\n */\nconst compR = (rfn, fn) => [rfn[0], rfn[1], fn];\n\nexports.compR = compR;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":1,"column":0}},{"generated":{"line":32,"column":0},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":7}},{"name":"compR","generated":{"line":32,"column":6},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":13}},{"generated":{"line":32,"column":11},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":18}},{"generated":{"line":32,"column":14},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":21}},{"name":"rfn","generated":{"line":32,"column":15},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":22}},{"generated":{"line":32,"column":18},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":21}},{"name":"fn","generated":{"line":32,"column":20},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":27}},{"generated":{"line":32,"column":22},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":21}},{"generated":{"line":32,"column":27},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":34}},{"name":"rfn","generated":{"line":32,"column":28},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":35}},{"generated":{"line":32,"column":31},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":38}},{"generated":{"line":32,"column":32},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":39}},{"generated":{"line":32,"column":33},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":38}},{"generated":{"line":32,"column":34},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":34}},{"name":"rfn","generated":{"line":32,"column":36},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":43}},{"generated":{"line":32,"column":39},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":46}},{"generated":{"line":32,"column":40},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":47}},{"generated":{"line":32,"column":41},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":46}},{"generated":{"line":32,"column":42},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":34}},{"name":"fn","generated":{"line":32,"column":44},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":51}},{"generated":{"line":32,"column":46},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":34}},{"generated":{"line":32,"column":47},"source":"../node_modules/@thi.ng/transducers/func/compr.js","original":{"line":25,"column":7}}],"sources":{"../node_modules/@thi.ng/transducers/func/compr.js":"/**\n * Reducer composition helper, internally used by various transducers\n * during initialization. Takes existing reducer `rfn` (a 3-tuple) and a\n * reducing function `fn`. Returns a new reducer tuple.\n *\n * @remarks\n * `rfn[2]` reduces values of type `B` into an accumulator of type `A`.\n * `fn` accepts values of type `C` and produces interim results of type\n * `B`, which are then (possibly) passed to the \"inner\" `rfn[2]`\n * function. Therefore the resulting reducer takes inputs of `C` and an\n * accumulator of type `A`.\n *\n * It is assumed that `fn` internally calls `rfn[2]` to pass its own\n * results for further processing by the nested reducer `rfn`.\n *\n * @example\n * ```ts\n * compR(rfn, fn)\n * // [rfn[0], rfn[1], fn]\n * ```\n *\n * @param rfn -\n * @param fn -\n */\nexport const compR = (rfn, fn) => [rfn[0], rfn[1], fn];\n"},"lineCount":null}},"error":null,"hash":"b43a1624000d9a5ee6a0e7317f78a393","cacheData":{"env":{}}}