{"id":"../node_modules/@thi.ng/color/invert.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1604244572636},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\color\\package.json","includedInParent":true,"mtime":1602877541099},{"name":"@thi.ng/vectors","loc":{"line":1,"column":27},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\color\\invert.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\vectors\\index.js"},{"name":"./clamp","loc":{"line":2,"column":22},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\color\\invert.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\color\\clamp.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invertInt = exports.invertRGB = void 0;\n\nvar _vectors = require(\"@thi.ng/vectors\");\n\nvar _clamp = require(\"./clamp\");\n\n/**\n * Inverts the RGB channels of an RGBA color.\n *\n * @param out - result\n * @param src - source color\n */\nconst invertRGB = (out, src) => (out = (0, _clamp.clamp)(out || src, src), (0, _vectors.sub3)(out, _vectors.ONE3, out));\n/**\n * Inverts the lowest 24 bits of an ARGB int. Does not modify alpha.\n *\n * @param src - packed RGB int\n */\n\n\nexports.invertRGB = invertRGB;\n\nconst invertInt = src => src ^ 0xffffff;\n\nexports.invertInt = invertInt;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":4,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":5,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":6,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":7,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":8,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":7}},{"name":"invertRGB","generated":{"line":18,"column":6},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":13}},{"generated":{"line":18,"column":15},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":22}},{"generated":{"line":18,"column":18},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":25}},{"name":"out","generated":{"line":18,"column":19},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":26}},{"generated":{"line":18,"column":22},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":25}},{"name":"src","generated":{"line":18,"column":24},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":31}},{"generated":{"line":18,"column":27},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":25}},{"name":"out","generated":{"line":18,"column":33},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":41}},{"generated":{"line":18,"column":36},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":44}},{"generated":{"line":18,"column":39},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":47}},{"name":"out","generated":{"line":18,"column":57},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":53}},{"generated":{"line":18,"column":60},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":56}},{"name":"src","generated":{"line":18,"column":64},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":60}},{"generated":{"line":18,"column":67},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":47}},{"name":"src","generated":{"line":18,"column":69},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":65}},{"generated":{"line":18,"column":72},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":47}},{"generated":{"line":18,"column":73},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":40}},{"generated":{"line":18,"column":75},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":72}},{"name":"out","generated":{"line":18,"column":94},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":77}},{"generated":{"line":18,"column":97},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":72}},{"name":"ONE3","generated":{"line":18,"column":99},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":82}},{"generated":{"line":18,"column":112},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":72}},{"name":"out","generated":{"line":18,"column":114},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":88}},{"generated":{"line":18,"column":117},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":72}},{"generated":{"line":18,"column":118},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":25}},{"generated":{"line":18,"column":119},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":9,"column":7}},{"generated":{"line":19,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":10,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":11,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":12,"column":0}},{"generated":{"line":22,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":13,"column":0}},{"generated":{"line":23,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":14,"column":0}},{"generated":{"line":28,"column":0},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":7}},{"name":"invertInt","generated":{"line":28,"column":6},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":13}},{"generated":{"line":28,"column":15},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":22}},{"name":"src","generated":{"line":28,"column":18},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":26}},{"generated":{"line":28,"column":21},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":25}},{"name":"src","generated":{"line":28,"column":25},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":34}},{"generated":{"line":28,"column":28},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":37}},{"generated":{"line":28,"column":31},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":40}},{"generated":{"line":28,"column":39},"source":"../node_modules/@thi.ng/color/invert.js","original":{"line":15,"column":7}}],"sources":{"../node_modules/@thi.ng/color/invert.js":"import { ONE3, sub3 } from \"@thi.ng/vectors\";\nimport { clamp } from \"./clamp\";\n/**\n * Inverts the RGB channels of an RGBA color.\n *\n * @param out - result\n * @param src - source color\n */\nexport const invertRGB = (out, src) => ((out = clamp(out || src, src)), sub3(out, ONE3, out));\n/**\n * Inverts the lowest 24 bits of an ARGB int. Does not modify alpha.\n *\n * @param src - packed RGB int\n */\nexport const invertInt = (src) => src ^ 0xffffff;\n"},"lineCount":null}},"error":null,"hash":"1ce7046f2a674834e545f491859854b4","cacheData":{"env":{}}}