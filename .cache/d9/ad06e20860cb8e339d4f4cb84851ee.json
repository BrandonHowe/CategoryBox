{"id":"../node_modules/@thi.ng/binary/mask.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1604244572636},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\binary\\package.json","includedInParent":true,"mtime":1602877541095},{"name":"./constants","loc":{"line":1,"column":22},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\binary\\mask.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\binary\\constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.maskH = exports.maskL = exports.defMask = void 0;\n\nvar _constants = require(\"./constants\");\n\n/**\n * Creates bit mask by enabling bit `a` to bit `b-1`, both in range\n * 0-32. `b` MUST be >= `a`.\n *\n * @example\n * ```ts\n * defMask(1,31).toString(16) // 7ffffffe\n * defMask(3,8).toString(16)  // f8\n * ```\n *\n * @param a - first bit\n * @param b - last bit\n */\nconst defMask = (a, b) => (~_constants.MASKS[a] & _constants.MASKS[b]) >>> 0;\n/**\n * Returns unsigned version of `x` with only lowest `n` bits.\n *\n * @param n - number of LSB bits\n * @param x - value\n */\n\n\nexports.defMask = defMask;\n\nconst maskL = (n, x) => (x & _constants.MASKS[n]) >>> 0;\n/**\n * Returns unsigned version of `x` with only highest `n` bits.\n *\n * @param n - number of MSB bits\n * @param x - value\n */\n\n\nexports.maskL = maskL;\n\nconst maskH = (n, x) => (x & ~_constants.MASKS[n]) >>> 0;\n\nexports.maskH = maskH;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":2,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":3,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":4,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":6,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":7,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":8,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":9,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":10,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":11,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":12,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":13,"column":0}},{"generated":{"line":22,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":14,"column":0}},{"generated":{"line":23,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":7}},{"name":"defMask","generated":{"line":23,"column":6},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":13}},{"generated":{"line":23,"column":13},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":20}},{"generated":{"line":23,"column":16},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":23}},{"name":"a","generated":{"line":23,"column":17},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":24}},{"generated":{"line":23,"column":18},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":23}},{"name":"b","generated":{"line":23,"column":20},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":27}},{"generated":{"line":23,"column":21},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":23}},{"generated":{"line":23,"column":26},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":33}},{"generated":{"line":23,"column":27},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":34}},{"name":"MASKS","generated":{"line":23,"column":28},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":35}},{"name":"a","generated":{"line":23,"column":45},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":41}},{"generated":{"line":23,"column":46},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":35}},{"generated":{"line":23,"column":47},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":34}},{"name":"MASKS","generated":{"line":23,"column":50},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":46}},{"name":"b","generated":{"line":23,"column":67},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":52}},{"generated":{"line":23,"column":68},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":46}},{"generated":{"line":23,"column":69},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":33}},{"generated":{"line":23,"column":75},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":60}},{"generated":{"line":23,"column":76},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":15,"column":7}},{"generated":{"line":24,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":16,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":17,"column":0}},{"generated":{"line":26,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":18,"column":0}},{"generated":{"line":27,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":19,"column":0}},{"generated":{"line":28,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":20,"column":0}},{"generated":{"line":29,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":21,"column":0}},{"generated":{"line":34,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":7}},{"name":"maskL","generated":{"line":34,"column":6},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":13}},{"generated":{"line":34,"column":11},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":18}},{"generated":{"line":34,"column":14},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":21}},{"name":"n","generated":{"line":34,"column":15},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":22}},{"generated":{"line":34,"column":16},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":21}},{"name":"x","generated":{"line":34,"column":18},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":25}},{"generated":{"line":34,"column":19},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":21}},{"generated":{"line":34,"column":24},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":31}},{"name":"x","generated":{"line":34,"column":25},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":32}},{"generated":{"line":34,"column":26},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":33}},{"name":"MASKS","generated":{"line":34,"column":29},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":36}},{"name":"n","generated":{"line":34,"column":46},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":42}},{"generated":{"line":34,"column":47},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":36}},{"generated":{"line":34,"column":48},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":31}},{"generated":{"line":34,"column":54},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":50}},{"generated":{"line":34,"column":55},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":22,"column":7}},{"generated":{"line":35,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":23,"column":0}},{"generated":{"line":36,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":24,"column":0}},{"generated":{"line":37,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":25,"column":0}},{"generated":{"line":38,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":26,"column":0}},{"generated":{"line":39,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":27,"column":0}},{"generated":{"line":40,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":28,"column":0}},{"generated":{"line":45,"column":0},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":7}},{"name":"maskH","generated":{"line":45,"column":6},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":13}},{"generated":{"line":45,"column":11},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":18}},{"generated":{"line":45,"column":14},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":21}},{"name":"n","generated":{"line":45,"column":15},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":22}},{"generated":{"line":45,"column":16},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":21}},{"name":"x","generated":{"line":45,"column":18},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":25}},{"generated":{"line":45,"column":19},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":21}},{"generated":{"line":45,"column":24},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":31}},{"name":"x","generated":{"line":45,"column":25},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":32}},{"generated":{"line":45,"column":26},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":33}},{"generated":{"line":45,"column":29},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":36}},{"name":"MASKS","generated":{"line":45,"column":30},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":37}},{"name":"n","generated":{"line":45,"column":47},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":43}},{"generated":{"line":45,"column":48},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":37}},{"generated":{"line":45,"column":49},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":31}},{"generated":{"line":45,"column":55},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":51}},{"generated":{"line":45,"column":56},"source":"../node_modules/@thi.ng/binary/mask.js","original":{"line":29,"column":7}}],"sources":{"../node_modules/@thi.ng/binary/mask.js":"import { MASKS } from \"./constants\";\n/**\n * Creates bit mask by enabling bit `a` to bit `b-1`, both in range\n * 0-32. `b` MUST be >= `a`.\n *\n * @example\n * ```ts\n * defMask(1,31).toString(16) // 7ffffffe\n * defMask(3,8).toString(16)  // f8\n * ```\n *\n * @param a - first bit\n * @param b - last bit\n */\nexport const defMask = (a, b) => (~MASKS[a] & MASKS[b]) >>> 0;\n/**\n * Returns unsigned version of `x` with only lowest `n` bits.\n *\n * @param n - number of LSB bits\n * @param x - value\n */\nexport const maskL = (n, x) => (x & MASKS[n]) >>> 0;\n/**\n * Returns unsigned version of `x` with only highest `n` bits.\n *\n * @param n - number of MSB bits\n * @param x - value\n */\nexport const maskH = (n, x) => (x & ~MASKS[n]) >>> 0;\n"},"lineCount":null}},"error":null,"hash":"ef066047233448e9108d9f0ce38286f0","cacheData":{"env":{}}}