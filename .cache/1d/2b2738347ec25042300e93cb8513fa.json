{"id":"../node_modules/@thi.ng/transducers/iter/iterate.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1604244572636},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\transducers\\package.json","includedInParent":true,"mtime":1602877541099}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.iterate = iterate;\n\n/**\n * Yields an infinite iterator of the inductive sequence:\n *\n * `f(x+1) = f(f(x))`\n *\n * @remarks\n * The first value emitted always is `seed` itself, then f(seed),\n * f(f(seed)) etc. The given function is called with the current\n * iteration counter as 2nd arg.\n *\n * @example\n * ```ts\n * [...iterate((x) => x * 2, 1, 5)]\n * // [ 1, 2, 4, 8, 16 ]\n *\n * [...iterate((x, i) => x * 10 + i, 0, 8)]\n * // [ 0, 1, 12, 123, 1234, 12345, 123456, 1234567 ]\n * ```\n *\n * @param fn -\n * @param seed -\n * @param num -\n */\nfunction* iterate(fn, seed, num = Infinity) {\n  let i = 0;\n\n  while (i < num) {\n    yield seed;\n    seed = fn(seed, ++i);\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":11,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":16,"column":0}},{"generated":{"line":24,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":17,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":18,"column":0}},{"generated":{"line":26,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":19,"column":0}},{"generated":{"line":27,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":20,"column":0}},{"generated":{"line":28,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":0}},{"generated":{"line":29,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":22,"column":0}},{"generated":{"line":30,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":7}},{"name":"iterate","generated":{"line":31,"column":10},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":17}},{"generated":{"line":31,"column":17},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":7}},{"name":"fn","generated":{"line":31,"column":18},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":25}},{"generated":{"line":31,"column":20},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":7}},{"name":"seed","generated":{"line":31,"column":22},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":29}},{"generated":{"line":31,"column":26},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":7}},{"name":"num","generated":{"line":31,"column":28},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":35}},{"generated":{"line":31,"column":31},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":38}},{"name":"Infinity","generated":{"line":31,"column":34},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":41}},{"generated":{"line":31,"column":42},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":7}},{"generated":{"line":31,"column":44},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":51}},{"generated":{"line":32,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":4}},{"name":"i","generated":{"line":32,"column":6},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":8}},{"generated":{"line":32,"column":7},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":9}},{"generated":{"line":32,"column":10},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":12}},{"generated":{"line":32,"column":11},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":4}},{"generated":{"line":34,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":26,"column":4}},{"name":"i","generated":{"line":34,"column":9},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":26,"column":11}},{"generated":{"line":34,"column":10},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":26,"column":12}},{"name":"num","generated":{"line":34,"column":13},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":26,"column":15}},{"generated":{"line":34,"column":16},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":26,"column":4}},{"generated":{"line":34,"column":18},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":26,"column":20}},{"generated":{"line":35,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":27,"column":8}},{"name":"seed","generated":{"line":35,"column":10},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":27,"column":14}},{"generated":{"line":35,"column":14},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":27,"column":8}},{"name":"seed","generated":{"line":36,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":8}},{"name":"seed","generated":{"line":36,"column":4},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":8}},{"generated":{"line":36,"column":8},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":12}},{"name":"fn","generated":{"line":36,"column":11},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":15}},{"generated":{"line":36,"column":13},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":17}},{"name":"seed","generated":{"line":36,"column":14},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":18}},{"generated":{"line":36,"column":18},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":17}},{"generated":{"line":36,"column":20},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":24}},{"name":"i","generated":{"line":36,"column":22},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":26}},{"generated":{"line":36,"column":23},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":17}},{"generated":{"line":36,"column":24},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":28,"column":8}},{"generated":{"line":37,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":29,"column":5}},{"generated":{"line":38,"column":0},"source":"../node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":30,"column":1}}],"sources":{"../node_modules/@thi.ng/transducers/iter/iterate.js":"/**\n * Yields an infinite iterator of the inductive sequence:\n *\n * `f(x+1) = f(f(x))`\n *\n * @remarks\n * The first value emitted always is `seed` itself, then f(seed),\n * f(f(seed)) etc. The given function is called with the current\n * iteration counter as 2nd arg.\n *\n * @example\n * ```ts\n * [...iterate((x) => x * 2, 1, 5)]\n * // [ 1, 2, 4, 8, 16 ]\n *\n * [...iterate((x, i) => x * 10 + i, 0, 8)]\n * // [ 0, 1, 12, 123, 1234, 12345, 123456, 1234567 ]\n * ```\n *\n * @param fn -\n * @param seed -\n * @param num -\n */\nexport function* iterate(fn, seed, num = Infinity) {\n    let i = 0;\n    while (i < num) {\n        yield seed;\n        seed = fn(seed, ++i);\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"5528cc0b0900cc499fa6b42e23d33b19","cacheData":{"env":{}}}