{"id":"../node_modules/@thi.ng/strings/trim.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1602941589745},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\strings\\package.json","includedInParent":true,"mtime":1602877541097},{"name":"@thi.ng/memoize","loc":{"line":1,"column":25},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\strings\\trim.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\memoize\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trim = void 0;\n\nvar _memoize = require(\"@thi.ng/memoize\");\n\n/**\n * Higher order trim function (both sides) with support for user defined\n * trimmable characters (default: whitespace only).\n *\n * @example\n * ```ts\n * trim()(\"  Hello   \")\n * // \"Hello\"\n *\n * trim(\" -+\")(\"-+-+- Hello -+-+-\")\n * // \"Hello\"\n * ```\n *\n * @param chars -\n */\nconst trim = (0, _memoize.memoize1)((chars = \" \\t\\n\\r\") => {\n  chars = `(${chars.split(\"\").map(x => `\\\\${x}`).join(\"|\")})`;\n  const re = new RegExp(`(^${chars}+)|(${chars}+$)`, \"g\");\n  return x => x.replace(re, \"\");\n});\nexports.trim = trim;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":2,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":7}},{"name":"trim","generated":{"line":25,"column":6},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":13}},{"generated":{"line":25,"column":10},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":17}},{"generated":{"line":25,"column":13},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":20}},{"generated":{"line":25,"column":36},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":29}},{"name":"chars","generated":{"line":25,"column":37},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":30}},{"generated":{"line":25,"column":42},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":35}},{"generated":{"line":25,"column":45},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":38}},{"generated":{"line":25,"column":54},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":29}},{"generated":{"line":25,"column":59},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":52}},{"name":"chars","generated":{"line":26,"column":0},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":4}},{"name":"chars","generated":{"line":26,"column":2},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":4}},{"generated":{"line":26,"column":7},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":9}},{"generated":{"line":26,"column":10},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":13}},{"name":"chars","generated":{"line":26,"column":14},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":16}},{"generated":{"line":26,"column":19},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":21}},{"name":"split","generated":{"line":26,"column":20},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":19,"column":9}},{"generated":{"line":26,"column":25},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":16}},{"generated":{"line":26,"column":26},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":19,"column":15}},{"generated":{"line":26,"column":28},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":16}},{"name":"map","generated":{"line":26,"column":30},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":20,"column":9}},{"generated":{"line":26,"column":33},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":16}},{"name":"x","generated":{"line":26,"column":34},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":20,"column":14}},{"generated":{"line":26,"column":35},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":20,"column":13}},{"generated":{"line":26,"column":39},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":20,"column":21}},{"name":"x","generated":{"line":26,"column":44},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":20,"column":25}},{"generated":{"line":26,"column":45},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":20,"column":27}},{"generated":{"line":26,"column":47},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":16}},{"name":"join","generated":{"line":26,"column":49},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":21,"column":9}},{"generated":{"line":26,"column":53},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":16}},{"generated":{"line":26,"column":54},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":21,"column":14}},{"generated":{"line":26,"column":57},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":16}},{"generated":{"line":26,"column":58},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":21,"column":19}},{"generated":{"line":26,"column":61},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":18,"column":4}},{"generated":{"line":27,"column":0},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":4}},{"name":"re","generated":{"line":27,"column":8},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":10}},{"generated":{"line":27,"column":10},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":12}},{"generated":{"line":27,"column":13},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":15}},{"name":"RegExp","generated":{"line":27,"column":17},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":19}},{"generated":{"line":27,"column":23},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":15}},{"generated":{"line":27,"column":24},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":27}},{"name":"chars","generated":{"line":27,"column":29},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":31}},{"generated":{"line":27,"column":34},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":37}},{"name":"chars","generated":{"line":27,"column":41},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":43}},{"generated":{"line":27,"column":46},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":49}},{"generated":{"line":27,"column":51},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":15}},{"generated":{"line":27,"column":53},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":55}},{"generated":{"line":27,"column":56},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":15}},{"generated":{"line":27,"column":57},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":22,"column":4}},{"generated":{"line":28,"column":0},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":4}},{"name":"x","generated":{"line":28,"column":9},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":12}},{"generated":{"line":28,"column":10},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":11}},{"name":"x","generated":{"line":28,"column":14},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":18}},{"generated":{"line":28,"column":15},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":19}},{"name":"replace","generated":{"line":28,"column":16},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":20}},{"generated":{"line":28,"column":23},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":18}},{"name":"re","generated":{"line":28,"column":24},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":28}},{"generated":{"line":28,"column":26},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":18}},{"generated":{"line":28,"column":28},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":32}},{"generated":{"line":28,"column":30},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":18}},{"generated":{"line":28,"column":31},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":23,"column":4}},{"generated":{"line":29,"column":0},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":24,"column":1}},{"generated":{"line":29,"column":1},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":20}},{"generated":{"line":29,"column":2},"source":"../node_modules/@thi.ng/strings/trim.js","original":{"line":17,"column":7}}],"sources":{"../node_modules/@thi.ng/strings/trim.js":"import { memoize1 } from \"@thi.ng/memoize\";\n/**\n * Higher order trim function (both sides) with support for user defined\n * trimmable characters (default: whitespace only).\n *\n * @example\n * ```ts\n * trim()(\"  Hello   \")\n * // \"Hello\"\n *\n * trim(\" -+\")(\"-+-+- Hello -+-+-\")\n * // \"Hello\"\n * ```\n *\n * @param chars -\n */\nexport const trim = memoize1((chars = \" \\t\\n\\r\") => {\n    chars = `(${chars\n        .split(\"\")\n        .map((x) => `\\\\${x}`)\n        .join(\"|\")})`;\n    const re = new RegExp(`(^${chars}+)|(${chars}+$)`, \"g\");\n    return (x) => x.replace(re, \"\");\n});\n"},"lineCount":null}},"error":null,"hash":"83219e77bbd70d434602e24e128214ed","cacheData":{"env":{}}}