{"id":"../node_modules/@thi.ng/vectors/fill.js","dependencies":[{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\package.json","includedInParent":true,"mtime":1602941589745},{"name":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\vectors\\package.json","includedInParent":true,"mtime":1602941035831},{"name":"./map","loc":{"line":1,"column":21},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\vectors\\fill.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\vectors\\map.js"},{"name":"./set","loc":{"line":2,"column":20},"parent":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\vectors\\fill.js","resolved":"C:\\Users\\Brandon 2\\Documents\\Projects\\categorytheory\\node_modules\\@thi.ng\\vectors\\set.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fill = void 0;\n\nvar _map = require(\"./map\");\n\nvar _set = require(\"./set\");\n\n/**\n * Fills Vec2/3/4 view based buffer, supporting arbitrary component and\n * element layouts of both the input and output buffers. The `out`\n * vector is used as write cursor over the underlying buffer and will be\n * filled with the components of vector `v`.\n *\n * @example\n * ```ts\n * fill(\n *   new Vec2(new Float32Array(12)),\n *   new Vec2([1, 2]),\n *   3, // num elements\n *   4  // stride\n * )\n * // Float32Array [1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0]\n * ```\n *\n * @param out - target vector / wrapped buffer\n * @param v - fill vector\n * @param num - number of elements to fill\n * @param so - output stride\n */\nconst fill = (out, v, num, so = out.length * out.stride) => (0, _map.mapV)(_set.set.impl(v.length), out, v, num, so, 0);\n\nexports.fill = fill;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":3,"column":0}},{"generated":{"line":34,"column":0},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":7}},{"name":"fill","generated":{"line":34,"column":6},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":13}},{"generated":{"line":34,"column":10},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":17}},{"generated":{"line":34,"column":13},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":20}},{"name":"out","generated":{"line":34,"column":14},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":21}},{"generated":{"line":34,"column":17},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":20}},{"name":"v","generated":{"line":34,"column":19},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":26}},{"generated":{"line":34,"column":20},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":20}},{"name":"num","generated":{"line":34,"column":22},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":29}},{"generated":{"line":34,"column":25},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":20}},{"name":"so","generated":{"line":34,"column":27},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":34}},{"generated":{"line":34,"column":29},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":36}},{"name":"out","generated":{"line":34,"column":32},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":39}},{"generated":{"line":34,"column":35},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":42}},{"name":"length","generated":{"line":34,"column":36},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":43}},{"generated":{"line":34,"column":42},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":39}},{"name":"out","generated":{"line":34,"column":45},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":52}},{"generated":{"line":34,"column":48},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":55}},{"name":"stride","generated":{"line":34,"column":49},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":56}},{"generated":{"line":34,"column":55},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":20}},{"generated":{"line":34,"column":60},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":67}},{"name":"set","generated":{"line":34,"column":75},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":72}},{"name":"impl","generated":{"line":34,"column":84},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":76}},{"generated":{"line":34,"column":88},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":72}},{"name":"v","generated":{"line":34,"column":89},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":81}},{"generated":{"line":34,"column":90},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":82}},{"name":"length","generated":{"line":34,"column":91},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":83}},{"generated":{"line":34,"column":97},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":72}},{"generated":{"line":34,"column":98},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":67}},{"name":"out","generated":{"line":34,"column":100},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":92}},{"generated":{"line":34,"column":103},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":67}},{"name":"v","generated":{"line":34,"column":105},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":97}},{"generated":{"line":34,"column":106},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":67}},{"name":"num","generated":{"line":34,"column":108},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":100}},{"generated":{"line":34,"column":111},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":67}},{"name":"so","generated":{"line":34,"column":113},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":105}},{"generated":{"line":34,"column":115},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":67}},{"generated":{"line":34,"column":117},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":109}},{"generated":{"line":34,"column":118},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":67}},{"generated":{"line":34,"column":119},"source":"../node_modules/@thi.ng/vectors/fill.js","original":{"line":25,"column":7}}],"sources":{"../node_modules/@thi.ng/vectors/fill.js":"import { mapV } from \"./map\";\nimport { set } from \"./set\";\n/**\n * Fills Vec2/3/4 view based buffer, supporting arbitrary component and\n * element layouts of both the input and output buffers. The `out`\n * vector is used as write cursor over the underlying buffer and will be\n * filled with the components of vector `v`.\n *\n * @example\n * ```ts\n * fill(\n *   new Vec2(new Float32Array(12)),\n *   new Vec2([1, 2]),\n *   3, // num elements\n *   4  // stride\n * )\n * // Float32Array [1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0]\n * ```\n *\n * @param out - target vector / wrapped buffer\n * @param v - fill vector\n * @param num - number of elements to fill\n * @param so - output stride\n */\nexport const fill = (out, v, num, so = out.length * out.stride) => mapV(set.impl(v.length), out, v, num, so, 0);\n"},"lineCount":null}},"error":null,"hash":"293adbd46d48cf0909d455577831d82a","cacheData":{"env":{}}}